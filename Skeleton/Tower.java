package Program.Skeleton;
import java.util.ArrayList;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : Tower.java
//  @ Date : 2014.03.11.
//  @ Author : itee_team
//
//


public class Tower implements ITower, IFieldPlaceable {
	/**
	 * A torony �ra. Az az �rt�k, amit a man�b�l le kell vonni ahhoz, hogy a j�t�kos megvehesse a tornyot. Statikus, mert minden toronyra ugyanaz.
	**/
	public static final int price = 10;
	
	/**
	 * A torony hat�sugara, hogy h�ny cell�t �r el a szomsz�dos cell�k k�z�l.
	**/
	private int range;
	private int speedCtr;
	private int speed;
	/**
	 * A l�ved�k amit a torony kil�.
	**/
	private Bullet bullet;
	
	/**
	 * Fejleszt�seket t�rol� v�ltoz�. Ebb�l der�l ki, hogy az adott toronyra milyen Gem-eket vett m�r meg a j�t�kos.
	**/
	private ArrayList<ITGem> gems;
	
	/**
	 * Annak a mez�nek a referenci�ja, amelyiken az adott torony �ll.
	**/
	private Field myField;
	
	/**
	 * Azon cell�k list�ja, amelyek beleesnek a l�t�vba (range).
	**/
	private ArrayList<Path> paths;
	private IGame igame;
	private Field itower;
	public Game towers;
	
	/**
	 * Konstruktor
	 *
	 * @param    rang
	 * @param    pr
	**/
	public Tower(IGame game) {
		SkeletonTester.safePrint("--> Tower konstruktor", true);
		igame = game;
		gems = new ArrayList<ITGem>();
		paths = new ArrayList<Path>();
		bullet = new Bullet();
		SkeletonTester.safePrint("<-- Tower konstruktor return", false);
	}
	
	public void upgradeSpeed(int sp) {
		SkeletonTester.safePrint("--> Tower upgradeSpeed", true);
		speed += sp;
		SkeletonTester.safePrint("--> Tower upgradeSpeed return", false);
	}
	
	public void upgradeRange(int rng) {
		SkeletonTester.safePrint("--> Tower upgradeRange", true);
		range += rng;
		setPaths();
		SkeletonTester.safePrint("--> Tower upgradeRange return", false);
	}
	
	public void upgradeEnemy(Enemy e) {
		SkeletonTester.safePrint("--> Tower upgradeEnemy", true);
		bullet.setEnemy(e);
		SkeletonTester.safePrint("--> Tower upgradeEnemy return", false);
	}
	
	public void upgradeDamage(int dmg) {
		SkeletonTester.safePrint("--> Tower upgradeDamage", true);
		bullet.setDamage(dmg);
		SkeletonTester.safePrint("--> Tower upgradeDamage return", false);
	}
	
	public Enemy chooseEnemy() {
		SkeletonTester.safePrint("--> Tower choose enemy", true);
		Path path = paths.get(0);
		
		SkeletonTester.safePrint("<-- Tower return", false);	
		if(!path.hasEnemy()) return null;
		return path.getEnemies().get(0);
	}
	
	// kivalaszt egy ellenseget es megsebzi a bullet-tel
	public void shoot() {
		SkeletonTester.safePrint("--> Tower shoot", true);

		Enemy target = chooseEnemy();
		if(target==null){
			SkeletonTester.safePrint("<-- Tower shoot return", false);
			return;
		}
		target.hurt(bullet);
		SkeletonTester.safePrint("<-- Tower shoot return", false);
	}
	
	// ez a fv csak teszteleshez kell
	public void addPath(Path path){
		paths.add(path);		
	}
	
	public void setPaths() {
		SkeletonTester.safePrint("--> Tower setPaths", true);
		
		SkeletonTester.safePrint("<-- Tower setPaths return", false);
	}
	
	public void addITGem(ITGem g) {
		SkeletonTester.safePrint("--> Tower addITGem", true);
		g.upgradeTower(this);
		gems.add(g);
		
		SkeletonTester.safePrint("<-- Tower addITgem return", false);
	}
	
	public void registerField(Field field) {
		SkeletonTester.safePrint("--> Tower registerField", true);
		if(!field.hasTower()){
			myField = field;
			field.registerITower(this);
		}
		SkeletonTester.safePrint("<-- Tower  registerField return", false);
	}
	
	public void sell() {
		SkeletonTester.safePrint("--> Tower sell", true);
		int value = price/2;
		
		
		for(ITGem g:gems){
			value = g.getValue();
		}
		
		igame.changeMana(value);
		
		igame.removeTower(this);
		
		myField.deleteIFieldPlaceable(this);
		
		SkeletonTester.safePrint("<-- Tower sell return", false);
	}
}
